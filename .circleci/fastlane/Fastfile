$is_ci = ENV.has_key? 'CIRCLECI'
$password
$sim_name = 'testsim'
$default_consumer_key = '3MVG9Iu66FKeHhINkB1l7xt7kR8czFcCTUhgoA8Ol2Ltf1eYHOU4SqQRSEitYFDUpqRWcoQ2.dBv_a1Dyu5xa'
$default_redirect_uri = 'testsfdc:///mobilesdk/detect/oauth/done'
$passcode_consumer_key = '3MVG9CEn_O3jvv0wTqRT0Le6tm3FUd9g7z5OQNsZVd5QxWGnUavJG6q1RaNugeQF4A8lELyXQsNJ8deynMFoO'
$passcode_redirect_uri = 'mobilesdk://auth/passcode'
$adv_auth_consumer_key = '3MVG9CEn_O3jvv0wTqRT0Le6tmyfUanAsJ6rWLQniOaec1Ks6YBBYFaJSfMREVJdPeRxTneqgoSxdswYvb9vP'
$adv_auth_redirect_uri = 'com.mobilesdk.advauth:///oauth/success'
$android_login_activity = '<activity android:name="com.salesforce.androidsdk.ui.LoginActivity'

App_Info = Struct.new(:os, :app_name, :app_path, :package_name, :xcargs)

lane :ios do |options|
  app_info = base_ios_test_setup(options)
  test_class = options[:passcode] ? 'TestPasscode' : 'TestLogin'

  install_ios_app(app_info)
  run_ios_tests(test_class, app_info.package_name, app_info.xcargs)
end

lane :android do |options|
  Dir.chdir('../../')

  app_info = base_android_test_setup(options)
  
  test_class = 'com.salesforce.mobilesdk.mobilesdkuitest.'
  test_class.concat(options[:passcode] ? 'passcode.PasscodeTests' : 'login.LoginTests')
  if $is_ci
    run_android_tests_firebase(test_class, app_info)
  else
    system("$ANDROID_HOME/platform-tools/adb uninstall #{app_info.package_name}")
    install_android_app(app_info.app_path, (app_info.package_name.include?('react')))  
    run_android_tests(test_class, app_info.package_name, app_info.xcargs)
  end
end

#
# Generic Reusable Helper Functions
#
def get_password()
  if ENV.has_key? 'CI_USER_PASSWORD'
    return ENV['CI_USER_PASSWORD']
  else
    # Crash if not set for CI
    UI.crash!('Error: Password should be set in CircleCI Environment Variables.') if $is_ci

    # Let user recover for local run
    UI.important 'Error: CI User Password not set!!!'
    UI.important 'For future use please execute: export CI_USER_PASSWORD=<password>'
    UI.important 'CI User Password can be found here: https://salesforce.quip.com/RmK0A8aSX3Cc'
    return prompt(text: 'To recover now, enter the password for CI User:')
  end
end

# Either type or template needs to be set.
def generate_app(os, type = nil, template = nil, sfdx = nil)
  UI.crash!('Error: Cannot generate app without type or template.') unless(type or template)

  system('rm -rf tmp*/')
  system('rm -rf Android/app/build/')
  generate_command = "./SalesforceMobileSDK-Package/test/test_force.js --os=#{os}"
  if type
    UI.header "Generating #{type} App"
    generate_command.concat(" --apptype=#{type}")

    if type.start_with?('hybrid')
      generate_command.concat(' --no-plugin-update')
    end
  else
    UI.header 'Generating App from Template'
    generate_command.concat("  --templaterepouri=#{template}")
  end

  if sfdx
    generate_command.concat(' --use-sfdx')
  end
  
  result = silence_output(true) { system(generate_command) }
  UI.user_error!('Test app was not successfully created.') unless(result)
end

#
# Android Helper Functions
#
def base_android_test_setup(options)
  $is_ci = true if options[:firebase] 
  $password = get_password
  run_type = options[:type]
  template = options[:template]
  UI.user_error!('Please specify run type.') unless(run_type or template)
  sfdx = options[:sfdx]
  passcode = options[:passcode]
  adv_auth = options[:adv_auth]
  UI.user_error!('Please specify either passcode or adv_auth.') if(passcode and adv_auth)
  args = adv_auth ? ["advAuth=true"] : []
  rerun = options[:rerun]

  if template 
    templateName = template.split('/').last.split('#').first
    templateName.gsub!(/(?<=[[:lower:]])[[:upper:]]+/, ‘_\&’).downcase!
  end

  app_name = 'android'.concat(template ? templateName : run_type).gsub('_', '')
  package_name = "com.salesforce.#{app_name}"

  generate_app('android', run_type, template, sfdx) unless rerun
  app_path = Dir.glob("tmp*").last.concat("/#{app_name}/")

  if app_name.downcase.include?('hybrid')
    app_path.concat('platforms/android/')
  elsif app_name.downcase.include?('react')
    react_native_setup(app_path)
    app_path.concat('android/')

    Dir.chdir(app_path) do
    UI.important 'Building Release APK for React Native' 
      silence_output{ 
        system('./gradlew assembleRelease --no-daemon')
        system('echo "test12\ntest12\n\n\n\n\n\n\nyes\ntest12\ntest12" | keytool -genkey -v -keystore uitest.keystore -alias react -keyalg RSA -keysize 2048 -validity 1')
        system('echo "test12\n" | jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore uitest.keystore ./app/build/outputs/apk/release/app-release-unsigned.apk react')
      }
    end
  end

  app_info = App_Info.new('android', app_name, app_path, package_name, args)
  if passcode 
    change_connected_app(app_info, $passcode_consumer_key, $passcode_redirect_uri)
  elsif adv_auth
    setup_adv_auth(app_info)
  end
  
  return app_info
end

def install_android_app(app_path, release = nil)
  apk_path = release ? 'release/app-release-unsigned.apk' : 'debug/app-debug.apk'

  Dir.chdir(app_path) do
    UI.important 'Installing App on Emulator'
    result = `$ANDROID_HOME/platform-tools/adb install -r app/build/outputs/apk/#{apk_path}`.split("\n").last.delete("\r")
    UI.build_failure!("APK did not install successfully. \n\nError: #{result}") unless(result.eql? 'Success')
  end
end

def run_android_tests(test_class, package_name, test_ops = nil)
  class_param =  "-Pandroid.testInstrumentationRunnerArguments.class=#{test_class}"
  package_param = "-Pandroid.testInstrumentationRunnerArguments.packageName=#{package_name}"
  password_param = "-Pandroid.testInstrumentationRunnerArguments.password=#{$password}"
  optional_vars = ''
  test_ops.each { |op| optional_vars.concat("-Pandroid.testInstrumentationRunnerArguments.#{op} ") } if test_ops

  Dir.chdir('./Android/') do
    UI.header 'Run Tests Locally'
    
    begin
      system("$ANDROID_HOME/platform-tools/adb shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp'")
      result = system("./gradlew #{class_param} #{package_param} #{password_param} #{optional_vars} connectedAndroidTest")
    ensure
      UI.test_failure!('Tests failed.') unless(result)
    end
  end
end

def run_android_tests_firebase(test_class, app_info)
  # Get app type for categorizing test results
  app_type = app_info.app_name.split('android').last
  apk_path = app_type.include?('react') ? 'release/app-release-unsigned.apk' : 'debug/app-debug.apk'
  optional_vars = ''
  app_info.xcargs.each { |op| optional_vars.concat(",#{op}") } if app_info.xcargs

  devices = ''
  min = test_class.include?('Passcode') ? 24 : 23
  for api_level in min..28 do
    devices.concat("--device model=NexusLowRes,version=#{api_level},locale=en,orientation=portrait \\")
  end

  Dir.chdir('./Android/') do
    UI.message 'Compile Tests'
    buildResult = system("./gradlew app:assembleAndroidTest")
    UI.build_failure!('Tests failed to build.') unless buildResult    
    
    UI.header 'Run Tests'
    testResult = system("gcloud firebase test android run \
      --project mobile-apps-firebase-test \
      --type instrumentation \
      --app=../#{app_info.app_path}app/build/outputs/apk/#{apk_path} \
      --test=app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
      #{devices}
      --results-dir=UITest-#{app_type}  \
      --results-history-name=UITest-#{app_type}  \
      --results-dir=UITest-#{app_type}-#{ENV['CIRCLE_BUILD_NUM']}  \
      --environment-variables class=#{test_class},packageName=#{app_info.package_name},password=#{$password},firebase=true#{optional_vars}   \
      --no-performance-metrics --no-auto-google-login")
      UI.test_failure!('Tests failed.') unless testResult
  end
end

#
# iOS Helper Functions
#
def base_ios_test_setup(options)
  $password = get_password
  run_type = options[:type]
  template = options[:template]
  UI.user_error!('Please specify run type.') unless(run_type or template)
  sfdx = options[:sfdx]
  device = options[:device]
  ios = options[:ios]
  passcode = options[:passcode]
  adv_auth = options[:adv_auth]
  UI.user_error!('Please specify either passcode or adv_auth.') if(passcode and adv_auth)
  rerun = options[:rerun]
  xcode_path = '/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app'
  xcargs = []

  if template 
    templateName = template.split('/').last.split('#').first
    templateName.gsub!(/(?<=[[:lower:]])[[:upper:]]+/, ‘_\&’).downcase!
  end

  app_name = 'ios'.concat(template ? templateName : "#{run_type}").gsub('_', '')
  system("rm -rf ../../test_output/#{app_name}")
  bundle_name = app_name.include?('hybrid') ? "com.salesforce.#{app_name}" : "com.salesforce.#{app_name.gsub('_', '-')}"

  if device
    device.gsub!(' ', '-')
  else
    device = 'iPhone-11'
  end

  if ios
    ios.gsub!('.', '-')
  else
    ios = '13-0'
  end

  system("xcrun simctl delete #{$sim_name}") or true
  UI.important "Creating test device: #{device}, ios: #{ios}." 
  sim_id = `xcrun simctl create #{$sim_name} com.apple.CoreSimulator.SimDeviceType.#{device} com.apple.CoreSimulator.SimRuntime.iOS-#{ios}`.delete("\n")

  Dir.chdir('../../') do
    generate_app('ios', run_type, template, sfdx) unless rerun
    app_path = Dir.glob("tmp*").first.concat("/#{app_name}/")

    if app_name.include?('hybrid')
      app_path.concat('platforms/ios/')
    elsif app_name.include?('react')
      react_native_setup(app_path)
      app_path.concat('ios/')

      Dir.chdir(app_path) do
        silence_output { system("pod install") }
      end
    end
  
    # Start Simulator
    system("xcrun simctl boot #{sim_id}")
    system("open #{xcode_path} --args -CurrentDeviceUDID #{sim_id}")

    app_info = App_Info.new('ios', app_name, app_path, bundle_name, xcargs)
    if passcode 
      change_connected_app(app_info, $passcode_consumer_key, $passcode_redirect_uri)
    elsif adv_auth
      setup_adv_auth(app_info)
      xcargs.push("ADV_AUTH=true")
    end

    return app_info
  end
end

def install_ios_app(app_info, release = nil)
  # app_name = app_path.split('/')[3]
  Dir.chdir('../../' + app_info.app_path) do
    UI.important 'Build for Simulator'
    silence_output { system("xcodebuild build -scheme #{app_info.app_name} -workspace #{app_info.app_name}.xcworkspace -sdk iphonesimulator -derivedDataPath ./DerivedData") }

    UI.important 'Installing App on Simulator'
    system("xcrun simctl install booted ./DerivedData/Build/Products/Debug-iphonesimulator/#{app_info.app_name}.app")
  end
end

def run_ios_tests(test_scheme, bundle_name, xcargs)
  xcargs_string = ''
  xcargs.each { |arg| xcargs_string += "'#{arg}' " } unless xcargs.nil?
  app_type = bundle_name.split('.').last

  Dir.chdir('../../iOS/') do
    destination = "#{$sim_name} (" + `instruments -s devices | grep #{$sim_name} | awk -F"[()]" '{print $2}'`.delete("\n") + ")"
    begin
      scan(
        project: 'iOS/SalesforceMobileSDK-UITest.xcodeproj',
        scheme: test_scheme,
        device: destination,
        output_directory: "test_output/#{app_type}",
        clean: true,
        xcargs: "'TEST_APP_BUNDLE=#{bundle_name}' 'PASSWORD=#{$password}' #{xcargs_string}"
      )
    ensure
      system("xcrun simctl shutdown #{$sim_name}")
    end
  end
end

def silence_output(silence_error = false)
  begin
    stderr, stdout = $stderr.clone, $stdout.clone
    $stderr.reopen(File.new('/dev/null', 'w')) if silence_error
    $stdout.reopen(File.new('/dev/null', 'w'))
    yield
  rescue Exception => e
    $stdout.reopen(stdout)
    $stderr.reopen(stderr)
  ensure
    $stdout.reopen(stdout)
    $stderr.reopen(stderr)
  end
end

def react_native_setup(app_path)
  Dir.chdir(app_path) do
    UI.important 'Running React Native Setup'
    silence_output { system("./install*.js") }
    system('kill -9 `pgrep -f start`')
    system('npm start&')
  end
end

def change_connected_app(app_info, consumer_key, redirect_uri, old_key = nil, old_uri = nil)
  old_key = $default_consumer_key unless old_key
  old_uri = $default_redirect_uri unless old_uri
  config_path = app_info.app_path.clone
  android_build = 'assemble'

  # Determine iOS/Android
  if app_info.os == 'android'
    case app_info.app_name
    when 'androidnative', 'androidnativekotlin'
      config_path.concat('app/res/values/bootconfig.xml')
    when 'androidhybridlocal', 'androidhybridremote'
      config_path.concat('../../www/bootconfig.json')
    when 'androidreactnative', 'androidmobilesyncreactnative'
      config_path.concat('app/src/main/res/values/bootconfig.xml')
      android_build = 'assembleRelease'  
    end
  else
    case app_info.app_name
    when 'ioshybridlocal', 'ioshybridremote'
      config_path.concat('www/bootconfig.json')
    else
      config_path.concat(app_info.app_name + '/bootconfig.plist')
    end
  end

  modify_source(config_path, old_key, consumer_key)
  modify_source(config_path, old_uri, redirect_uri)

  UI.important 'Rebuilding with modified source files'
  Dir.chdir(app_info.app_path) do
    if app_info.os == 'android'
      result = silence_output { system("./gradlew #{android_build} --no-daemon") }
      UI.build_failure!('Failed to rebuild with modified source files.') unless result
    end
  end
end

def setup_adv_auth(app_info)
  scheme, path = $adv_auth_redirect_uri.split('://')

  if app_info.os == 'android'
    manifest_path = app_info.app_path + 'app/'
    case app_info.app_name
    when 'androidnative', 'androidnativekotlin'
      servers_path = app_info.app_path + '/mobile_sdk/SalesforceMobileSDK-Android/libs/SalesforceSDK/res/xml/servers.xml'
      manifest_path.concat('AndroidManifest.xml')
    when 'androidhybridlocal', 'androidhybridremote'
      manifest_path.concat('AndroidManifest.xml')
      servers_path = app_info.app_path + 'SalesforceSDK/res/xml/servers.xml'
    when 'androidreactnative', 'androidmobilesyncreactnative'
      manifest_path.concat('src/main/AndroidManifest.xml')
      servers_path = app_info.app_path + '../mobile_sdk/SalesforceMobileSDK-Android/libs/SalesforceSDK/res/xml/servers.xml'
    end

    # Uncomment single single instance in AndroidManifest
    modify_source(manifest_path, $android_login_activity, '-->' + $android_login_activity)
    # Replace scheme and path
    modify_source(manifest_path, 'testsfdc', scheme)
    modify_source(manifest_path, '/mobilesdk/detect/oauth/done', path)

    # Change connection
    modify_source(servers_path, 'login', 'msdk-dev-ed.my')
  else
    plist_path = app_info.app_path + app_info.app_name 
    case app_info.app_name
    when 'iosnative', 'iosnativeswift', 'iosreactnative', 'iosmobilesyncreactnative'
      plist_path.concat('/Info.plist')
    when 'ioshybridlocal', 'ioshybridremote'
      plist_path.concat(app_info.app_name + '-Info.plist')
    end

    plist = Plist.parse_xml(plist_path)
    plist["CFBundleURLTypes"] = [{"CFBundleURLName" => scheme}, {"CFBundleURLSchemes" => [scheme]}] 
    plist["SFDCOAuthLoginHost"] = "msdk-dev-ed.my.salesforce.com"
    File.open(plist_path, 'w') { |file| file.puts plist.to_plist } 
  end

  change_connected_app(app_info, $adv_auth_consumer_key, $adv_auth_redirect_uri)
end

def modify_source(config_path, old_code, new_code)
  modified_souce_code = File.read(config_path).gsub(old_code, new_code)
  File.open(config_path, 'w') { |file| file.puts modified_souce_code }
end